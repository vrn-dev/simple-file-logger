"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var log_1 = require("./lib/log");
var debugAppend = util_1.debuglog('append');
var debugList = util_1.debuglog('list');
var debugCompress = util_1.debuglog('compress');
var debugUnCmp = util_1.debuglog('uncompress');
var debugTrunc = util_1.debuglog('truncate');
var logger = new log_1.Logger('/../../.logs/');
logger.append('default', 'Test log 2', function (err, msg) {
    if ( !err ) {
        debugAppend('Logging to file succeeded');
    }
    else {
        debugAppend('Logging to file failed ', msg ? msg.message : '');
    }
});
logger.list(false, function (err, msg, data) {
    if ( !err ) {
        data.forEach(function (item) {
            return console.log(item);
        });
    }
    else {
        debugList('Error reading directory: ', msg ? msg.message : '');
    }
});
logger.compress('test_log2', 'test2_cmp', function (err, msg) {
    if ( !err ) {
        debugCompress('Compress Success');
    }
    else {
        debugCompress(msg ? msg.message : 'Compress Failed');
    }
});
logger.decompress('test2_cmp', function (err, data, msg) {
    if ( !err && data ) {
        console.log(data);
    }
    else {
        debugUnCmp(msg ? msg.message : '');
    }
});
logger.truncate('test_log2', function (err, msg) {
    if ( !err ) {
        debugTrunc('Truncated successfully');
    }
    else {
        debugTrunc(msg ? msg.message : 'Truncate Failed');
    }
});
exports.default = log_1.Logger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBZ0M7QUFDaEMsaUNBQW1DO0FBRW5DLElBQU0sV0FBVyxHQUFHLGVBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2QyxJQUFNLFNBQVMsR0FBRyxlQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkMsSUFBTSxhQUFhLEdBQUcsZUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzNDLElBQU0sVUFBVSxHQUFHLGVBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxQyxJQUFNLFVBQVUsR0FBRyxlQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFeEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQUMsR0FBRyxFQUFFLEdBQUc7SUFDNUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNOLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0tBQzVDO1NBQU07UUFDSCxXQUFXLENBQUMseUJBQXlCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNsRTtBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDOUIsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFZLElBQUssT0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFqQixDQUFpQixDQUFDLENBQUM7S0FDckQ7U0FBTTtRQUNILFNBQVMsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2xFO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRztJQUMvQyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ04sYUFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDckM7U0FBTTtRQUNILGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUM7S0FDeEQ7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLFVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHO0lBQzFDLElBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFHO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDckI7U0FBTTtRQUNILFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3RDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxVQUFDLEdBQUcsRUFBRSxHQUFHO0lBQ2xDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDTixVQUFVLENBQUMsd0JBQXdCLENBQUMsQ0FBQztLQUN4QztTQUFNO1FBQ0gsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUNyRDtBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsWUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVidWdsb2cgfSBmcm9tICd1dGlsJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbGliL2xvZyc7XG5cbmNvbnN0IGRlYnVnQXBwZW5kID0gZGVidWdsb2coJ2FwcGVuZCcpO1xuY29uc3QgZGVidWdMaXN0ID0gZGVidWdsb2coJ2xpc3QnKTtcbmNvbnN0IGRlYnVnQ29tcHJlc3MgPSBkZWJ1Z2xvZygnY29tcHJlc3MnKTtcbmNvbnN0IGRlYnVnVW5DbXAgPSBkZWJ1Z2xvZygndW5jb21wcmVzcycpO1xuY29uc3QgZGVidWdUcnVuYyA9IGRlYnVnbG9nKCd0cnVuY2F0ZScpO1xuXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCcvLi4vLi4vLmxvZ3MvJyk7XG5cbmxvZ2dlci5hcHBlbmQoJ2RlZmF1bHQnLCAnVGVzdCBsb2cgMicsIChlcnIsIG1zZykgPT4ge1xuICAgIGlmICghZXJyKSB7XG4gICAgICAgIGRlYnVnQXBwZW5kKCdMb2dnaW5nIHRvIGZpbGUgc3VjY2VlZGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWdBcHBlbmQoJ0xvZ2dpbmcgdG8gZmlsZSBmYWlsZWQgJywgbXNnID8gbXNnLm1lc3NhZ2UgOiAnJyk7XG4gICAgfVxufSk7XG5cbmxvZ2dlci5saXN0KGZhbHNlLCAoZXJyLCBtc2csIGRhdGEpID0+IHtcbiAgICBpZiAoIWVycikge1xuICAgICAgICBkYXRhLmZvckVhY2goKGl0ZW06IHN0cmluZykgPT4gY29uc29sZS5sb2coaXRlbSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnTGlzdCgnRXJyb3IgcmVhZGluZyBkaXJlY3Rvcnk6ICcsIG1zZyA/IG1zZy5tZXNzYWdlIDogJycpO1xuICAgIH1cbn0pO1xuXG5sb2dnZXIuY29tcHJlc3MoJ3Rlc3RfbG9nMicsICd0ZXN0Ml9jbXAnLCAoZXJyLCBtc2cpID0+IHtcbiAgICBpZiAoIWVycikge1xuICAgICAgICBkZWJ1Z0NvbXByZXNzKCdDb21wcmVzcyBTdWNjZXNzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWdDb21wcmVzcyhtc2cgPyBtc2cubWVzc2FnZSA6ICdDb21wcmVzcyBGYWlsZWQnKTtcbiAgICB9XG59KTtcblxubG9nZ2VyLmRlY29tcHJlc3MoJ3Rlc3QyX2NtcCcsIChlcnIsIGRhdGEsIG1zZykgPT4ge1xuICAgIGlmICggIWVyciAmJiBkYXRhICkge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Z1VuQ21wKG1zZyA/IG1zZy5tZXNzYWdlIDogJycpO1xuICAgIH1cbn0pO1xuXG5sb2dnZXIudHJ1bmNhdGUoJ3Rlc3RfbG9nMicsIChlcnIsIG1zZykgPT4ge1xuICAgIGlmICghZXJyKSB7XG4gICAgICAgIGRlYnVnVHJ1bmMoJ1RydW5jYXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Z1RydW5jKG1zZyA/IG1zZy5tZXNzYWdlIDogJ1RydW5jYXRlIEZhaWxlZCcpO1xuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBMb2dnZXI7Il19